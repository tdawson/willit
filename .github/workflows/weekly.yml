name: Weekly Build

on:
  schedule: # for scheduling to work this file must be in the default branch
  - cron: "0 0 * * 3" # repeat every Wednesday
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.get-repo-names.outputs.repos }}
      willitHash: ${{ steps.get-image-hash.outputs.willitHash }}

    steps:
    - name: Create containerfile
      run: |
        mkdir -p ./image
        cat <<EOF>> ./image/willit.Containerfile
        FROM quay.io/centos/centos:stream9
        # EPEL
        RUN dnf -y install 'dnf-command(config-manager)' && \
            dnf -y config-manager --set-enabled crb && \
            dnf -y install epel-release epel-next-release

        # Project Dependencies
        RUN dnf -y install \
                python3-dnf \
                python3-requests \
                python3-bugzilla \
                python3-jinja2 \
                koji \
                util-linux
        EOF
    
    - name: Get image Hash
      id: get-image-hash
      run: |
        echo "willitHash=${{ hashFiles('./image/willit.Containerfile') }}" >> "$GITHUB_OUTPUT"

    - name: Get image from cache
      id: image-cache
      uses: actions/cache@v4
      with:
        path: |
          ./image/willit-deploy.tar
        key: container-${{ hashFiles('./image/willit.Containerfile') }}

    - uses: gacts/install-podman@v1
      if: steps.image-cache.outputs.cache-hit != 'true'

    - name: Build Image
      if: steps.image-cache.outputs.cache-hit != 'true'
      run: |
        podman build -t willit-image:tmp -f ./image/willit.Containerfile .
        podman save -o ./image/willit-deploy.tar willit-image:tmp

    - uses: actions/checkout@v4
      with:
        path: willit

    - name: Get repo names
      id: get-repo-names
      run: |
        echo "repos=$( \
            jq -c \
              '[.repos[].RepoName | select( contains("-next") == false )]' \
              willit/willit-config.json \
          )" >> "$GITHUB_OUTPUT"

  gen-repo-pages:
    runs-on: ubuntu-latest
    needs: prepare-env
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.prepare-env.outputs.repos) }}

    steps:
    - uses: actions/checkout@v4

    - name: Filter config file
      run: |
        cat <<< $( \
            jq '{ repos:[.repos[] | select( .RepoName | contains("${{ matrix.repo }}") ) ]}' \
            willit-config.json \
          ) > willit-config.json

    - name: Get image from cache
      id: image-cache
      uses: actions/cache@v4
      with:
        path: |
          ./image/willit-deploy.tar
        key: container-${{ needs.prepare-env.outputs.willitHash }}

    - uses: gacts/install-podman@v1
    - name: Load image
      run: |
        podman load < ./image/willit-deploy.tar
    - name: Run process
      run: |
        podman run --rm \
          -v $(pwd):/opt/willit \
          -w /opt/willit \
          willit-image:tmp python3 willit.py

    - name: Upload output
      uses: actions/upload-artifact@v4
      with:
        name: output-${{ matrix.repo }}
        path: ./output/*
        retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: gen-repo-pages

    steps:
    - uses: actions/checkout@v4

    - name: Download repos output
      uses: actions/download-artifact@v4
      with:
        path: .
    
    - name: Preprare merge environment
      run: |
        mkdir output
        # Get all specific repo webpages
        cp -r $(find . -mindepth 2 -maxdepth 2 -type d -iwholename "./output-*") output/
        # Merge all status-overall.json files into one
        jq \
          -s add \
          $( \
            echo $( \
              find . \
                -mindepth 2 -maxdepth 2 \
                -type f \
                -iwholename "./output-*/status-overall.json" \
            ) \
          ) > output/status-overall.json

        echo '{ "repos": [] }' > willit-config.json

    - name: Get image from cache
      id: image-cache
      uses: actions/cache@v4
      with:
        path: |
          ./image/willit-deploy.tar
        key: container-${{ needs.prepare-env.outputs.willitHash }}

    - uses: gacts/install-podman@v1
    - name: Load image
      run: |
        podman load < ./image/willit-deploy.tar
    - name: Run merge process
      run: |
        podman run --rm \
          -v $(pwd):/opt/willit \
          -w /opt/willit \
          willit-image:tmp python3 willit.py

    - name: Upload output
      uses: actions/upload-artifact@v4
      with:
        name: willit-output
        path: ./output/*
        retention-days: 1
